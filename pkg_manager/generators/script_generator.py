"""
Script generator for creating virtual environments and installing packages.
"""

import os
import platform
from typing import List, Optional
from ..models import ResolutionResult, Environment, ResolvedPackage


class ScriptGenerator:
    """Generates installation scripts for virtual environments."""
    
    def __init__(self):
        self.system = platform.system().lower()
    
    def generate_install_script(self, 
                               resolution_result: ResolutionResult, 
                               environment: Environment,
                               output_file: str = "install.sh",
                               venv_name: str = "venv") -> str:
        """Generate a bash script to create a virtual environment and install packages."""
        
        script_lines = [
            "#!/bin/bash",
            "",
            "# Python Package Manager - Auto-generated installation script",
            f"# Python version: {environment.python_version}",
            f"# Platform: {environment.platform}",
            "",
            "set -e  # Exit on any error",
            "",
            "# Colors for output",
            "RED='\\033[0;31m'",
            "GREEN='\\033[0;32m'",
            "YELLOW='\\033[1;33m'",
            "NC='\\033[0m'  # No Color",
            "",
            "echo -e \"${GREEN}Setting up Python virtual environment...${NC}\"",
            "",
            "# Check if Python is available",
            f"if ! command -v python{environment.python_version} &> /dev/null; then",
            f"    echo -e \"${{RED}}Error: Python {environment.python_version} is not installed${{NC}}\"",
            "    echo \"Please install Python and try again.\"",
            "    exit 1",
            "fi",
            "",
            "# Remove existing virtual environment if it exists",
            f"if [ -d \"{venv_name}\" ]; then",
            f"    echo -e \"${{YELLOW}}Removing existing virtual environment...${{NC}}\"",
            f"    rm -rf {venv_name}",
            "fi",
            "",
            "# Create virtual environment",
            f"echo -e \"${{GREEN}}Creating virtual environment...${{NC}}\"",
            f"python{environment.python_version} -m venv {venv_name}",
            "",
            "# Activate virtual environment",
            f"echo -e \"${{GREEN}}Activating virtual environment...${{NC}}\"",
            f"source {venv_name}/bin/activate",
            "",
            "# Upgrade pip",
            "echo -e \"${GREEN}Upgrading pip...${NC}\"",
            "pip install --upgrade pip",
            "",
            "# Install packages",
            "echo -e \"${GREEN}Installing packages...${NC}\"",
        ]
        
        # Add package installation commands
        for package in resolution_result.packages:
            script_lines.append(f"pip install {package.name}=={package.version}")
        
        script_lines.extend([
            "",
            "echo -e \"${GREEN}Installation completed successfully!${NC}\"",
            "echo -e \"${GREEN}To activate the virtual environment, run:${NC}\"",
            f"echo -e \"${{YELLOW}}source {venv_name}/bin/activate${{NC}}\"",
            "",
            "# Deactivate virtual environment",
            "deactivate",
            "",
            "echo -e \"${GREEN}Virtual environment setup complete!${NC}\""
        ])
        
        script_content = "\n".join(script_lines)
        
        # Write script to file
        with open(output_file, 'w') as f:
            f.write(script_content)
        
        # Make script executable
        os.chmod(output_file, 0o755)
        
        return script_content
    
    def generate_requirements_file(self, 
                                  resolution_result: ResolutionResult,
                                  output_file: str = "requirements.txt") -> str:
        """Generate a requirements.txt file with resolved package versions."""
        
        requirements_lines = [
            "# Auto-generated requirements.txt",
            "# Generated by Python Package Manager",
            ""
        ]
        
        # Sort packages by name for consistent output
        sorted_packages = sorted(resolution_result.packages, key=lambda p: p.name)
        
        for package in sorted_packages:
            requirements_lines.append(f"{package.name}=={package.version}")
        
        requirements_content = "\n".join(requirements_lines)
        
        # Write to file
        with open(output_file, 'w') as f:
            f.write(requirements_content)
        
        return requirements_content
    
    def generate_activation_script(self, 
                                   venv_name: str = "venv",
                                   output_file: str = "activate.sh") -> str:
        """Generate a simple activation script."""
        
        script_lines = [
            "#!/bin/bash",
            "",
            "# Virtual environment activation script",
            f"source {venv_name}/bin/activate",
            "echo \"Virtual environment activated!\"",
            "echo \"To deactivate, run: deactivate\""
        ]
        
        script_content = "\n".join(script_lines)
        
        # Write script to file
        with open(output_file, 'w') as f:
            f.write(script_content)
        
        # Make script executable
        os.chmod(output_file, 0o755)
        
        return script_content
    
    def generate_windows_script(self, 
                               resolution_result: ResolutionResult,
                               environment: Environment,
                               output_file: str = "install.bat",
                               venv_name: str = "venv") -> str:
        """Generate a Windows batch script for installation."""
        
        script_lines = [
            "@echo off",
            "",
            "REM Python Package Manager - Auto-generated installation script",
            f"REM Python version: {environment.python_version}",
            f"REM Platform: {environment.platform}",
            "",
            "echo Setting up Python virtual environment...",
            "",
            f"REM Check if Python {environment.python_version} is available",
            f"python{environment.python_version} --version >nul 2>&1",
            "if errorlevel 1 (",
            f"    echo Error: Python {environment.python_version} is not installed",
            "    echo Please install Python and try again.",
            "    pause",
            "    exit /b 1",
            ")",
            "",
            f"REM Remove existing virtual environment if it exists",
            f"if exist {venv_name} (",
            f"    echo Removing existing virtual environment...",
            f"    rmdir /s /q {venv_name}",
            ")",
            "",
            f"REM Create virtual environment",
            "echo Creating virtual environment...",
            f"python{environment.python_version} -m venv {venv_name}",
            "",
            f"REM Activate virtual environment",
            "echo Activating virtual environment...",
            f"call {venv_name}\\Scripts\\activate.bat",
            "",
            "REM Upgrade pip",
            "echo Upgrading pip...",
            "python -m pip install --upgrade pip",
            "",
            "REM Install packages",
            "echo Installing packages...",
        ]
        
        # Add package installation commands
        for package in resolution_result.packages:
            script_lines.append(f"pip install {package.name}=={package.version}")
        
        script_lines.extend([
            "",
            "echo Installation completed successfully!",
            "echo To activate the virtual environment, run:",
            f"echo {venv_name}\\Scripts\\activate.bat",
            "",
            "pause"
        ])
        
        script_content = "\n".join(script_lines)
        
        # Write script to file
        with open(output_file, 'w') as f:
            f.write(script_content)
        
        return script_content 